// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ShoppingCartApi.Models;
using System;

namespace ShoppingCartApi.Migrations
{
    [DbContext(typeof(ShoppingCartDbContext))]
    partial class ShoppingCartDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("ShoppingCartApi.Models.BillingInfo", b =>
                {
                    b.Property<Guid>("BillingInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("CompanyName");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid>("OrderId");

                    b.Property<string>("PostalCode");

                    b.HasKey("BillingInfoId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("BillingInfos");
                });

            modelBuilder.Entity("ShoppingCartApi.Models.Manufacturer", b =>
                {
                    b.Property<Guid>("ManufacturerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ManufacturerCategory");

                    b.Property<string>("ManufacturerEmail");

                    b.Property<string>("ManufacturerName")
                        .IsRequired();

                    b.Property<string>("ManufacturerUrl");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("ShoppingCartApi.Models.ManufacturerCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryDescription");

                    b.Property<string>("CategoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("ManufacturerCategories");
                });

            modelBuilder.Entity("ShoppingCartApi.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerId");

                    b.Property<string>("Email");

                    b.Property<bool>("NotifyShopper");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderNo")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PaymentMethodId");

                    b.Property<Guid>("ShipmentMethodId");

                    b.Property<string>("Status");

                    b.HasKey("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShipmentMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShoppingCartApi.Models.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("OrderId");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Qty");

                    b.Property<decimal>("Total");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ShoppingCartApi.Models.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("ShoppingCartApi.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductCategory");

                    b.Property<string>("ProductManufacturer");

                    b.Property<string>("ProductMediaFile");

                    b.Property<string>("ProductName")
                        .IsRequired();

                    b.Property<string>("ProductSku");

                    b.Property<int>("ShopperReview");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ShoppingCartApi.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.HasKey("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ShoppingCartApi.Models.ShipmentMethod", b =>
                {
                    b.Property<Guid>("ShipmentMethodId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ShipmentMethodId");

                    b.ToTable("ShipmentMethods");
                });

            modelBuilder.Entity("ShoppingCartApi.Models.Shopper", b =>
                {
                    b.Property<Guid>("ShopperId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DispalyedName");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("IsVendor");

                    b.Property<string>("ShopperGroup");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("ShopperId");

                    b.ToTable("Shoppers");
                });

            modelBuilder.Entity("ShoppingCartApi.Models.BillingInfo", b =>
                {
                    b.HasOne("ShoppingCartApi.Models.Order", "Order")
                        .WithOne("BillingInfo")
                        .HasForeignKey("ShoppingCartApi.Models.BillingInfo", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShoppingCartApi.Models.Order", b =>
                {
                    b.HasOne("ShoppingCartApi.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShoppingCartApi.Models.ShipmentMethod", "ShipmentMethod")
                        .WithMany()
                        .HasForeignKey("ShipmentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShoppingCartApi.Models.OrderItem", b =>
                {
                    b.HasOne("ShoppingCartApi.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShoppingCartApi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
